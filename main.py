import os
import random
import json
import time
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types
from aiogram.types import ParseMode
from aiogram.utils import executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.daily import DailyTrigger

# –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv('TOKEN')
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
PORT = os.getenv('PORT')
ADMIN_ID = int(os.getenv('ADMIN_ID'))

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())

# –ó–∞–≥–∞–¥–∫–∏ –∏ —Ä–µ–π—Ç–∏–Ω–≥
puzzles = json.loads(open("puzzles.json", "r", encoding="utf-8").read())
users_data = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–≥–∞–¥–∫–∏
async def send_puzzle():
    today = datetime.now().date()
    puzzle_data = next((item for item in puzzles if item["date"] == str(today)), None)
    if puzzle_data:
        question = puzzle_data["question"]
        hint = puzzle_data["hint"]
        correct_answer = puzzle_data["answer"].lower()
        for user_id in users_data.keys():
            if 'answer' not in users_data[user_id]:
                await bot.send_message(user_id, f"–ó–∞–≥–∞–¥–∫–∞ –¥–Ω—è: {question}\n–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –Ω–µ—ë –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã—Å—Ç—Ä–µ–µ!\n\nüí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: {hint}")
        return correct_answer
    else:
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ù–ò–¢–ò–∫–æ–∏–Ω–æ–≤
def update_niti_coins(user_id, amount):
    if user_id not in users_data:
        users_data[user_id] = {"coins": 0}
    users_data[user_id]["coins"] += amount

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –∑–∞–≥–∞–¥–∫–∏
def get_time_until_next_puzzle():
    now = datetime.now()
    next_puzzle_time = datetime(now.year, now.month, now.day, 9, 0, 0) + timedelta(days=1)
    return next_puzzle_time - now

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    user_id = message.from_user.id
    if user_id not in users_data:
        users_data[user_id] = {"coins": 0, "answered": False, "hint_used": False}
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! üéâ\n\n"
                         f"–ú–æ–ª–æ–¥–µ–∂–Ω—ã–π —Å–æ–≤–µ—Ç –ù–ò–¢–ò –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–±—è! –ú—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ç—ã —Å–º–æ–∂–µ—à—å —Ä–∞–∑–≥–∞–¥–∞—Ç—å –Ω–∞—à–∏ –∑–∞–≥–∞–¥–∫–∏. üß†"
                         f" –ó–∞–≥–∞–¥–∫–∞ –¥–Ω—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ 09:00 –ø–æ –ú–æ—Å–∫–≤–µ. –ñ–µ–ª–∞–µ–º —Ç–µ–±–µ –ø–æ–±–æ–ª—å—à–µ –ù–ò–¢–ò–∫–æ–∏–Ω–æ–≤! üí∞\n\n"
                         f"–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –æ—Ç–≥–∞–¥—ã–≤–∞—Ç—å –∑–∞–≥–∞–¥–∫–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ù–ò–¢–ò–∫–æ–∏–Ω—ã. üòé")

    # –ü—Ä–∏—Å—ã–ª–∞–µ–º –∑–∞–≥–∞–¥–∫—É —Å—Ä–∞–∑—É
    correct_answer = await send_puzzle()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
@dp.message_handler(commands=['mycoins'])
async def my_coins(message: types.Message):
    user_id = message.from_user.id
    if user_id in users_data:
        coins = users_data[user_id]["coins"]
        await message.answer(f"–¢–≤–æ–∏ –ù–ò–¢–ò–∫–æ–∏–Ω—ã: {coins} üí∞")
    else:
        await message.answer("–¢—ã –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª –∏–≥—Ä–∞—Ç—å. –ü—Ä–∏—Ö–æ–¥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –ø–æ–ª—É—á–∞–π –∑–∞–≥–∞–¥–∫–∏! üòá")

@dp.message_handler(commands=['hint'])
async def hint(message: types.Message):
    user_id = message.from_user.id
    if user_id in users_data and not users_data[user_id]["hint_used"]:
        users_data[user_id]["hint_used"] = True
        await message.answer(f"–ü–æ–¥—Å–∫–∞–∑–∫–∞: {puzzles[0]['hint']}")
    else:
        await message.answer("–ü–æ–¥—Å–∫–∞–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç –ø–æ—Å–ª–µ –∑–∞–≥–∞–¥–∫–∏! ‚è≥")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@dp.message_handler(commands=['commands'])
async def show_commands(message: types.Message):
    if message.from_user.id == ADMIN_ID:
        await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                             "/start - –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É\n"
                             "/mycoins - —É–∑–Ω–∞—Ç—å —Å–≤–æ–∏ –ù–ò–¢–ò–∫–æ–∏–Ω—ã\n"
                             "/hint - –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫—É (–¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ 30 –º–∏–Ω)\n"
                             "/commands - –ø–æ–∫–∞–∑–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n"
                             "/addpuzzle - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∑–∞–≥–∞–¥–∫—É\n")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
